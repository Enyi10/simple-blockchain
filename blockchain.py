# -*- coding: utf-8 -*-
"""blockchain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JRSqH2WvJtKblAk9lBcNJK924Anq3vfe
"""
# import libraries 
import hashlib
import time

# block class 
class Block:
    def __init__(self, index, previous_hash, timestamp, data, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = hash

# functions to handle blockchain operations
# calculate the hash of a block
def calculate_hash(index, previous_hash, timestamp, data):
    value = str(index) + str(previous_hash) + str(timestamp) + str(data)
    return hashlib.sha256(value.encode('utf-8')).hexdigest()

# functions to create blocks
def create_genesis_block():
    """Creates the first block in the blockchain (genesis block)."""
    return Block(0, "0", time.time(), "Genesis Block",
                 calculate_hash(0, "0", time.time(), "Genesis Block"))

# functions to add blocks to the blockchain
def create_new_block(previous_block, data):
    """Creates a new block using the previous block’s hash."""
    index = previous_block.index + 1
    timestamp = time.time()
    previous_hash = previous_block.hash
    hash_value = calculate_hash(index, previous_hash, timestamp, data)
    return Block(index, previous_hash, timestamp, data, hash_value)

# functions to validate the blockchain
def validate_blockchain(blockchain):
    """Check the integrity of the blockchain"""
    for i in range(1, len(blockchain)):
        current = blockchain[i]
        prev = blockchain[i-1]
        # Check hash consistency
        if current.previous_hash != prev.hash:
            return False
        # Check recalculated hash
        recalculated_hash = calculate_hash(current.index, current.previous_hash, current.timestamp, current.data)
        if current.hash != recalculated_hash:
            return False
    return True

# functions to display the blockchain
def display_blockchain(blockchain):
    for block in blockchain:
        print(f"Block #{block.index}")
        print(f"Timestamp: {time.ctime(block.timestamp)}")
        print(f"Data: {block.data}")
        print(f"Hash: {block.hash}")
        print(f"Previous Hash: {block.previous_hash}\n")

# main function to run the blockchain

if __name__ == "__main__":
    blockchain = [create_genesis_block()]
    previous_block = blockchain[0]
# Main loop to interact with the blockchain
    while True:
        print("\nOptions:")
        print("1. Add a new block")
        print("2. Display blockchain")
        print("3. Validate blockchain")
        print("4. Exit")

        choice = input("Enter your choice: ")
# Process user input
        if choice == "1":
            data = input("Enter block data: ")
            new_block = create_new_block(previous_block, data)
            blockchain.append(new_block)
            previous_block = new_block
            print(f"Block #{new_block.index} added successfully!")
# Display the newly added block
        elif choice == "2":
            display_blockchain(blockchain)
# Validate the blockchain
        elif choice == "3":
            is_valid = validate_blockchain(blockchain)
            if is_valid:
                print("Blockchain is valid ✅")
            else:
                print("Blockchain has been tampered! ❌")
# Exit the program
        elif choice == "4":
            print("Exiting...")
            break
# Handle invalid input
        else:
            print("Invalid choice, try again.")
