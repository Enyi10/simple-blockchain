# -*- coding: utf-8 -*-
"""blockchain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JRSqH2WvJtKblAk9lBcNJK924Anq3vfe
"""
# Import necessary libraries
import hashlib  # For creating cryptographic hashes
import time     # For timestamps

# --- Block Class Definition ---
class Block:
    def __init__(self, index, previous_hash, timestamp, data, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = hash

# --- Functions for Blockchain Operations ---

# Calculate the hash of a block
def calculate_hash(index, previous_hash, timestamp, data):

    value = str(index) + str(previous_hash) + str(timestamp) + str(data)
    return hashlib.sha256(value.encode('utf-8')).hexdigest()

# Create the genesis block (the first block in the blockchain)
def create_genesis_block():

    return Block(0, "0", time.time(), "Genesis Block",
                 calculate_hash(0, "0", time.time(), "Genesis Block"))

# Create a new block using the previous block's hash
def create_new_block(previous_block, data):

    index = previous_block.index + 1
    timestamp = time.time()
    previous_hash = previous_block.hash
    hash_value = calculate_hash(index, previous_hash, timestamp, data)
    return Block(index, previous_hash, timestamp, data, hash_value)

# Validate the integrity of the blockchain
def validate_blockchain(blockchain):

    for i in range(1, len(blockchain)):
        current = blockchain[i]
        prev = blockchain[i-1]
        
        # Check if the chain is linked correctly
        if current.previous_hash != prev.hash:
            return False
            
        # Check if the block's hash is valid (not tampered with)
        recalculated_hash = calculate_hash(current.index, current.previous_hash, current.timestamp, current.data)
        if current.hash != recalculated_hash:
            return False
            
    return True

# Display the contents of the blockchain
def display_blockchain(blockchain):

    print("\n" + "="*50)
    print("                 BLOCKCHAIN CONTENTS")
    print("="*50)
    for block in blockchain:
        print(f"\n--- Block #{block.index} ---")
        print(f"Timestamp:   {time.ctime(block.timestamp)}")
        print(f"Data:        {block.data}")
        print(f"Hash:        {block.hash}")
        print(f"Previous Hash: {block.previous_hash}")
    print("="*50 + "\n")

# Manually change the data of a block
def tamper_block(blockchain, index, new_data):

    if 0 <= index < len(blockchain):
        blockchain[index].data = new_data
        print(f"Block #{index} data has been tampered with!")
    else:
        print("Invalid block index.")

# Display the data of a block
def get_block_data(blockchain, index):
 
    if 0 <= index < len(blockchain):
        print(f"\nData for Block #{index}: {blockchain[index].data}")
    else:
        print("Invalid block index.")

# Display the length of the blockchain
def get_chain_length(blockchain):

    print(f"\nTotal blocks in the chain: {len(blockchain)}")


# Find a block by data
def find_block_by_data(blockchain, search_data):
    found_blocks = [block.index for block in blockchain if search_data in block.data]
    if found_blocks:
        print(f"\nFound blocks with data '{search_data}': Indices {found_blocks}")
    else:
        print(f"\nNo blocks found containing '{search_data}'.")

# --- Main Program Execution ---

if __name__ == "__main__":
    blockchain = [create_genesis_block()]
    previous_block = blockchain[0]
    
    while True:
        print("\n--- Blockchain Menu ---")
        print("1. Add a new block")
        print("2. Display blockchain")
        print("3. Validate blockchain")
        print("4. Get data of a block")
        print("5. Get chain length")
        print("6. Find a block by data")
        print("7. Tamper with a block")
        print("8. Exit")
        print("-----------------------")
        
        choice = input("Enter your choice: ")
        
        if choice == "1":
            data = input("Enter block data: ")
            new_block = create_new_block(previous_block, data)
            blockchain.append(new_block)
            previous_block = new_block
            print(f"Block #{new_block.index} added successfully!")
            
        elif choice == "2":
            display_blockchain(blockchain)
            
        elif choice == "3":
            is_valid = validate_blockchain(blockchain)
            if is_valid:
                print("Blockchain is valid!")
            else:
                print("Blockchain integrity compromised! Tampering detected.")
                
        elif choice == "4":
            try:
                index = int(input("Enter block index: "))
                get_block_data(blockchain, index)
            except ValueError:
                print("Invalid input. Please enter a number.")
        
        elif choice == "5":
            get_chain_length(blockchain)
            
        elif choice == "6":
            search_data = input("Enter data to search for: ")
            find_block_by_data(blockchain, search_data)
            
        elif choice == "7":
            try:
                index = int(input("Enter block index to tamper: "))
                new_data = input("Enter new data for the block: ")
                tamper_block(blockchain, index, new_data)
            except ValueError:
                print("Invalid input. Please enter a number for the block index.")
        
        elif choice == "8":
            print("Exiting...")
            break
            
        else:
            print("Invalid choice. Please try again.")