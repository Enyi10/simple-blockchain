# -*- coding: utf-8 -*-
"""blockchain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JRSqH2WvJtKblAk9lBcNJK924Anq3vfe
"""

import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, timestamp, data, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = hash

def calculate_hash(index, previous_hash, timestamp, data):
    value = str(index) + str(previous_hash) + str(timestamp) + str(data)
    return hashlib.sha256(value.encode('utf-8')).hexdigest()

def create_genesis_block():
    """Creates the first block in the blockchain (genesis block)."""
    return Block(0, "0", time.time(), "Genesis Block",
                 calculate_hash(0, "0", time.time(), "Genesis Block"))

def create_new_block(previous_block, data):
    """Creates a new block using the previous blockâ€™s hash."""
    index = previous_block.index + 1
    timestamp = time.time()
    previous_hash = previous_block.hash
    hash_value = calculate_hash(index, previous_hash, timestamp, data)
    return Block(index, previous_hash, timestamp, data, hash_value)


if __name__ == "__main__":
    # Step 1 Demo
    blockchain = [create_genesis_block()]
    previous_block = blockchain[0]

    # Add 5 new blocks
    for i in range(1, 6):
        new_block = create_new_block(previous_block, f"Block {i} Data")
        blockchain.append(new_block)
        previous_block = new_block
        print(f"Block #{new_block.index} has been added to the blockchain!")
        print(f"Hash: {new_block.hash}\n")